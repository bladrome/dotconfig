#+TITLE: Emacs Configuration
#+PROPERTY: header-args:elisp :noweb yes :results silent :mkdirp yes :tangle "~/.emacs.d/init.el"  :exports code

* Emacs configuration
** Early-init.el
#+begin_src elisp :tangle ~/.emacs.d/early-init.el
  ;;; early-init.el --- Early Init File -*- lexical-binding: t; no-byte-compile: t -*-
  ;; Defer garbage collection further back in the startup process
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)
  ;; In Emacs 27+, package initialization occurs before `user-init-file' is
  ;; loaded, but after `early-init-file'. Doom handles package initialization, so
  ;; we must prevent Emacs from doing it early!
  (setq package-enable-at-startup nil)
  ;; Do not allow loading from the package cache (same reason).
  (setq package-quickstart nil)
  ;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we easily halve startup times with fonts that are
  ;; larger than the system default.
  (setq frame-inhibit-implied-resize t)
  (setq inhibit-compacting-font-caches t)
  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  ;; Make the initial buffer load faster by setting its mode to fundamental-mode
  ;; (setq initial-major-mode 'fundamental-mode)
  ;; Prevent unwanted runtime builds in gccemacs (native-comp); packages are
  ;; compiled ahead-of-time when they are installed and site files are compiled
  ;; when gccemacs is installed.
  (setq comp-deferred-compilation nil)
  ;; Disable mode-line, It's uglily after theme changed
  ;; (setq-default mode-line-format nil)
  ;; early-init.el ends here
#+end_src

** use-packages
#+begin_src elisp 
  (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
			   ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
			   ("nongnu" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/nongnu/")
			   ))

  (setq package-archives '(("gnu" . "http://mirrors.ustc.edu.cn/elpa/gnu/")
			   ("melpa" . "http://mirrors.ustc.edu.cn/elpa/melpa/")
			   ("nongnu" . "http://mirrors.ustc.edu.cn/elpa/nongnu/")))

  (package-initialize) ;; You might already have this line

  (setq use-package-always-ensure t)
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (use-package auto-compile
	       :config
	       (auto-compile-on-load-mode)
	       (auto-compile-on-save-mode))
  ;; (use-package quelpa)
  ;; (use-package quelpa-use-package)
#+end_src

** borg
#+begin_src elisp :tangle no
  (use-package borg)
  (custom-set-variables
   '(package-selected-packages '(borg)))
  (if (require 'borg-elpa nil t)
      (borg-elpa-initialize)
    (package-initialize))
#+end_src

** start speedup
#+begin_src elisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (linum-mode 1)

  (setq auto-mode-case-fold nil)

  ;; (unless (or (daemonp) noninteractive init-file-debug)
  ;;   (let ((old-file-name-handler-alist file-name-handler-alist))
  ;;     (setq file-name-handler-alist nil)
  ;;     (add-hook 'emacs-startup-hook
  ;; 	  (lambda ()
  ;; 		"Recover file name handlers."
  ;; 		(setq file-name-handler-alist
  ;; 		  (delete-dups (append file-name-handler-alist
  ;; 					   old-file-name-handler-alist)))))))
  (setq gc-cons-threshold most-positive-fixnum)


#+end_src

** custom file
#+begin_src elisp 
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file t)
#+end_src
** private file
#+begin_src elisp
  (defvar private-file nil "My private Emacs configuration")
  (setq private-file "~/.emacs.d/private.el")
  (load private-file t)
#+end_src

#+begin_src shell :tangle ~/.emacs.d/Makefile
  BORG_SECONDARY_P = true
  include $(shell find -L elpa -maxdepth 1 -regex '.*/borg-[.0-9]*' |\
    sort | tail -n 1)/borg.mk
#+end_src

** Vis
*** modeline
#+begin_src elisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+end_src
*** tab-bar
#+begin_src elisp
  (setq tab-bar-new-button-show nil)
  (setq tab-bar-close-button-show nil)
  (with-eval-after-load 'tab-bar
    (face-spec-set 'tab-bar-tab
           '((((background light))
              :foreground "controlAccentColor" :inherit nil)
             (t
              :foreground "deep sky blue" :inherit nil))
           'face-override-spec)

    (face-spec-set 'tab-bar
           '((((background light))
              :inherit modus-themes-tab-backdrop :underline t)
             (t
              :inherit modus-themes-tab-backdrop :underline t))
           'face-override-spec))

  (add-to-list 'tab-bar-format 'tab-bar-format-align-right t)
  (add-to-list 'tab-bar-format 'tab-bar-format-global t)
  ;; (tab-bar-mode t)
#+end_src
*** window-divider
#+begin_src elisp
  (setq window-divider-default-bottom-width 1)
  (setq window-divider-default-right-width 1)
  (setq window-divider-default-places t)
  (face-spec-set 'window-divider
		   '((((background light))
		      :foreground "#000000")
		     (t
		      :foreground "#FFFFFF"))
		   'face-override-spec)
  (add-hook 'after-init-hook 'window-divider-mode)
#+end_src
** info-colors
#+begin_src elisp
  (add-hook 'Info-selection-hook 'info-colors-fontify-node)
#+end_src
** rainbow-mode
#+begin_src elisp
  (use-package rainbow-mode)
  (add-hook 'prog-mode-hook 'rainbow-mode)
#+end_src
** doom-themes
#+begin_src elisp
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

** doom-snippets
#+begin_src elisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
  (use-package yasnippet-snippets)
#+end_src
** Builtin

*** y-or-n-p
#+begin_src elisp
  (setq use-short-answers t)
#+end_src
*** message
*** bell
#+begin_src elisp
  (setq ring-bell-function 'ignore)
#+end_src
#+begin_src elisp
  (setq message-kill-buffer-on-exit t)
  (setq message-kill-buffer-query nil)
#+end_src
*** Send mail
#+begin_src elisp
  (setq send-mail-function 'sendmail-send-it)
  (setq sendmail-program (executable-find "msmtp"))
  (setq mail-specify-envelope-from t)
  (setq mail-envelope-from 'header)
#+end_src
*** indent-tab-mode
#+begin_src elisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+end_src
*** kill-ring
Do not saves duplicates in kill-ring
#+begin_src elisp
  (setq kill-do-not-save-duplicates t)
#+end_src

*** trash
#+begin_src elisp
  (setq delete-by-moving-to-trash t)
#+end_src


*** system coding
#+begin_src elisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src
*** paren
#+begin_src elisp
  (setq show-paren-style 'mixed
	show-paren-when-point-inside-paren t
	show-paren-when-point-in-periphery t)
  (add-hook 'text-mode-hook 'show-paren-mode)
#+end_src

*** autorevert
#+begin_src elisp
  (setq auto-revert-verbose t)
 #+end_src
*** windmove
#+begin_src elisp
  (global-set-key (kbd "C-c w b") 'windmove-left)
  (global-set-key (kbd "C-c w n") 'windmove-down)
  (global-set-key (kbd "C-c w p") 'windmove-up)
  (global-set-key (kbd "C-c w f") 'windmove-right)
#+end_src
*** server
#+begin_src elisp
  (require 'server)
  (unless (server-running-p)
    (server-mode 1))
#+end_src
*** so-long
#+begin_src elisp
  (use-package so-long
	       :config
	       (add-hook 'text-mode-hook 'global-so-long-mode))
#+end_src
*** ibuffer
#+begin_src elisp
  (setq ibuffer-saved-filter-groups
	    (quote (("default"
		     ("dired" (mode . dired-mode))
		     ("perl" (mode . cperl-mode))
		     ("erc" (mode . erc-mode))
		     ("org" (mode . org-mode))
		     ("planner" (or
				 (name . "^\\*Calendar\\*$")
				 (name . "^diary$")
				 (mode . muse-mode)))
		     ("emacs" (or
			       (name . "^\\*scratch\\*$")
			       (name . "^\\*Messages\\*$")))))))
  (add-hook 'ibuffer-mode-hook
		(lambda ()
		  (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src
*** mouse-avoidance
#+begin_src elisp
  (mouse-avoidance-mode 'banish)
#+end_src
*** large file
#+begin_src elisp
  (setq large-file-warning-threshold nil)
#+end_src

** Third Packages
*** gcmh
#+begin_src elisp
  (use-package gcmh
	       :config
	       (setq gcmh-idle-delay 'auto)
	       (setq gcmh-auto-idle-delay-factor 10)
	       (setq gcmh-high-cons-threshold #x1000000)
	       (gcmh-mode 1))
#+end_src
*** recentf
#+begin_src elisp
  (use-package recentf
	       :config
	       (add-hook 'kill-emacs-hook #'recentf-cleanup)
	       (setq recentf-auto-cleanup 'never) ;; disable before we start recentf!
	       (setq recentf-max-saved-items 1000)
	       (setq recentf-exclude nil)
	       (recentf-mode 1))
#+end_src
*** projectile
#+begin_src elisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
** Font
#+begin_src elisp
  (add-to-list 'default-frame-alist '(font . "Droid Sans Mono-13"))
  (set-face-attribute 'default t :font "Droid Sans Mono-13")
#+end_src

** icons
#+begin_src elisp
  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :config
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode))

  (use-package all-the-icons-ibuffer
    :ensure t
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+end_src
** dired
*** files
#+begin_src elisp
  (setq confirm-kill-processes nil)
  (add-to-list 'revert-without-query ".+\\.org")
  (add-to-list 'revert-without-query ".+\\.tex")
  (add-to-list 'revert-without-query ".+\\.pdf")
#+end_src

*** dired
#+begin_src elisp
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
  (setq dired-dwim-target t)
  (setq delete-by-moving-to-trash t)
  (setq load-prefer-newer t)
  (setq auto-revert-use-notify nil)
  (setq auto-revert-interval 3)
  (setq dired-listing-switches "-al --group-directories-first")
  (put 'dired-find-alternate-file 'disabled nil)
#+end_src
*** save place
This means when you visit a file, point goes to the last place where it was when you previously visited the same file.
#+begin_src elisp
  (add-hook 'on-first-file-hook 'save-place-mode)
#+end_src
*** save hist
Toggle saving of minibuffer history.
#+begin_src elisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
	       :init
	       (savehist-mode)
	       :config
	       (setq history-length 1000)
	       (setq savehist-save-minibuffer-history 1)
	       (setq savehist-additional-variables '(kill-ring
						     search-ring
						     regexp-search-ring))
	       (setq history-delete-duplicates t)
	       (add-hook 'on-first-input-hook 'savehist-mode))
#+end_src

*** undo
#+begin_src elisp
  (use-package vundo
	     :config
	     (setq vundo-glyph-alist vundo-unicode-symbols))
#+end_src

*** ispell
#+begin_src elisp
  (setq ispell-program-name "aspell")
  (setq ispell-extra-args '("--sug-mode=ultra" "--lang=en_US" "--run-together"))
#+end_src

*** Flymake
#+begin_src elisp :tangle no
  (add-hook 'prog-mode-hook 'flymake-mode)
  (add-hook 'flymake-mode-hook 'flymake-popon-mode)
#+end_src

*** python flymake
#+begin_src elisp
  (add-hook 'python-mode-hook 'flymake-mode)
  (add-hook 'flymake-mode-hook 'flymake-popon-mode)

  (add-hook 'python-mode-hook 'flymake-python-pyflakes-load)
  (setq flymake-python-pyflakes-executable "flake8")
  (setq flymake-python-pyflakes-extra-arguments '("--ignore=W806"))
#+end_src
*** eldoc
在 echo 中显示有关函数或变量的信息。
#+begin_src elisp
  (use-package eldoc
	       :config
	       (add-hook 'on-first-buffer-hook 'eldoc-mode))
#+end_src

*** marginalia
#+begin_src elisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))
#+end_src

*** orderless
#+begin_src elisp
;; Optionally use the `orderless' completion style.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** corfu
#+begin_src elisp
  (use-package corfu
	       :init
	       (global-corfu-mode)
	       :config
	       (setq corfu-auto t)
	       (setq corfu-cycle t)
	       (setq corfu-quit-at-boundary t)
	       (setq corfu-auto-prefix 2)
	       (setq corfu-preselect-first t)
	       (setq corfu-quit-no-match t)
	       (setq completion-cycle-threshold 3)

	       (defun corfu-enable-always-in-minibuffer ()
		 "Enable Corfu in the minibuffer if Vertico/Mct are not active."
		 (unless (or (bound-and-true-p mct--active)
			     (bound-and-true-p vertico--input))
		   (corfu-mode 1)))
	       (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)

	       (add-hook 'on-first-input-hook 'global-corfu-mode)
	       (add-hook 'on-first-input-hook 'corfu-history-mode)
	       (add-hook 'on-first-input-hook 'corfu-indexed-mode))
#+end_src
*** corfu-doc
#+begin_src elisp
  (use-package corfu-doc
	       :config
	       (add-hook 'corfu-mode-hook #'corfu-doc-mode)
	       (setq corfu-doc-delay 0.5
		     corfu-doc-max-width 70
		     corfu-doc-max-height 20)
	       (with-eval-after-load 'corfu
		 (define-key corfu-map (kbd "M-p") #'corfu-doc-scroll-down)
		 (define-key corfu-map (kbd "M-n") #'corfu-doc-scroll-up)))
#+end_src
*** kind-icon

#+begin_src elisp
  (use-package kind-icon
	       :config
	       (setq kind-icon-default-face 'corfu-default)
	       (setq kind-icon-use-icons nil)
	       (with-eval-after-load 'corfu
		 (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)))
#+end_src

*** consult
#+begin_src elisp
  (use-package consult
	       :config
	       (add-hook 'completion-list-mode-hook 'consult-preview-at-point-mode)
	       (global-set-key (kbd "C-x C-b") 'consult-buffer)
	       (global-set-key (kbd "M-y") 'consult-yank-pop)

	       (global-set-key (kbd "C-c f r") 'consult-recent-file)
	       (global-set-key (kbd "C-c o o") 'consult-outline))
#+end_src

*** embark
#+begin_src elisp

(use-package embark
  :ensure t
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** cape
#+begin_src elisp
;; Enable Corfu completion UI
;; See the Corfu README for more configuration tips.

;; Add extensions
(use-package cape
  ;; Bind dedicated completion commands
  ;; Alternative prefix keys: C-c p, M-p, M-+, ...
  :bind (("C-c p p" . completion-at-point) ;; capf
         ("C-c p t" . complete-tag)        ;; etags
         ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
         ("C-c p h" . cape-history)
         ("C-c p f" . cape-file)
         ("C-c p k" . cape-keyword)
         ("C-c p s" . cape-symbol)
         ("C-c p a" . cape-abbrev)
         ("C-c p i" . cape-ispell)
         ("C-c p l" . cape-line)
         ("C-c p w" . cape-dict)
         ("C-c p \\" . cape-tex)
         ("C-c p _" . cape-tex)
         ("C-c p ^" . cape-tex)
         ("C-c p &" . cape-sgml)
         ("C-c p r" . cape-rfc1345))
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-history)
  ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
  ;;(add-to-list 'completion-at-point-functions #'cape-tex)
  ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
  ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
  ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
  ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
  ;;(add-to-list 'completion-at-point-functions #'cape-dict)
  ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
  ;;(add-to-list 'completion-at-point-functions #'cape-line)
)
#+end_src

** dashboard
#+begin_src elisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents  . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            (registers . 5))))
#+end_src
* Programing Languages
** complettion
#+begin_src elisp

;;; vertico
;; Enable vertico
(use-package vertico
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )


;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

* Orgmode
** Better Default
#+begin_src elisp
  (setq org-modules '())
  (setq org-deadline-warning-days 7)
  (setq org-imenu-depth 4)
  (setq org-return-follows-link t)
  (setq org-agenda-dim-blocked-tasks t)
  (setq org-image-actual-width nil)
  (setq org-display-remote-inline-images 'download)
  (setq org-log-into-drawer t)
  (setq org-fast-tag-selection-single-key 'expert)
  (setq org-adapt-indentation nil)
  (setq org-fontify-quote-and-verse-blocks t)
  (setq org-support-shift-select t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-hide-leading-stars nil)
  (setq org-startup-with-inline-images t)

  (global-set-key (kbd "C-c o l") 'org-cliplink)
  (global-set-key (kbd "C-c o i") 'org-toggle-inline-images)
  (global-set-key (kbd "C-c o I") 'org-redisplay-inline-images)
  (global-set-key (kbd "C-c o p i") 'org-id-get-create)
  (global-set-key (kbd "C-c o b") 'org-switchb)
#+end_src
** org todo
If you do not provide the separator bar, the last state is used as the DONE state.
#+begin_src elisp
  (setq org-todo-repeat-to-state t)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "STARTED" "|" "WAIT(w@)" "SOMEDAY(s@)" "CNCL(c@/!)" "DONE(d)")))
  (setq org-todo-state-tags-triggers
	(quote (("CNCL" ("CNCL" . t))
		("WAIT" ("WAIT" . t))
		("SOMEDAY" ("WAIT") ("SOMEDAY" . t))
		(done ("WAIT") ("SOMEDAY"))
		("TODO" ("WAIT") ("CNCL") ("SOMEDAY"))
		("NEXT" ("WAIT") ("CNCL") ("SOMEDAY"))
		("DONE" ("WAIT") ("CNCL") ("SOMEDAY")))))
#+end_src

** org protocol
#+begin_src elisp
(require 'org-protocol)
(defun transform-square-brackets-to-round-ones(string-to-transform)
  "Transforms [ into ( and ] into ), other chars left unchanged."
  (concat
   (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))
(setq org-capture-templates `(
                              ("p" "Protocal" entry (file+headline (lambda () (concat org-directory "/" (format-time-string "%Y%m%d") ".org")) "arxiv")
                               "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n \n%i\n\n\n\n%?")
                              ("L" "Protocol Link" entry (file+headline (lambda () (concat org-directory "/" "notes_" (shell-command-to-string "date +%F__%H-%M-%S_%Z"))) "Inbox")
                               "* %^{Title_and_tag}\n [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n")
                              ("w" "Web site" entry (file+headline (lambda () (concat org-directory "/" (format-time-string "%Y%m%d") ".org")) "arxiv")
                               "* %a :website:\n\n%U %?\n\n%:initial")
                              ("c" "Captured" entry (file+headline (lambda () (concat org-directory "/" (format-time-string "%Y%m%d") ".org")) "arxiv")
                               "* %t %:description\nlink: %l \n\n%i\n" :prepend t :empty-lines-after 1)
                              ("n" "Captured Now!" entry (file+headline (lambda () (concat org-directory "/" (format-time-string "%Y%m%d") ".org")) "arxiv")
                               "* %t %:description\nlink: %l \n\n%i\n" :prepend t :emptry-lines-after 1 :immediate-finish t)
                              ))
(setq org-tag-alist (quote (("noexport" . ?n)
                            (:startgroup)
                            ("@office" . ?o)
                            ("@field" . ?f)
                            (:endgroup)
                            ("personal" . ?p)
                            ("work" . ?w)
                            ("cancelled" . ?c)
                            ("read" . ?r)
                            ("browse" . ?b)
                            ("flagged" . ??))))

;; (setq org-latex-pdf-process
;;       '("xelatex -interaction nonstopmode -output-directory %o %f"
;; 	"bibtex %b"
;; 	"xelatex -interaction nonstopmode -output-directory %o %f"
;; 	"xelatex -interaction nonstopmode -output-directory %o %f"))
(setq org-latex-pdf-process (list "latexmk -xelatex -shell-escape -bibtex -f -pdf %f"))
#+end_src
** org-auto-tangle
#+begin_src elisp
  (use-package org-auto-tangle
	       :defer t
	       :hook (org-mode . org-auto-tangle-mode))
#+end_src
** org-src
默认是在右侧打开编辑 buffer ，我的屏幕小，所以我选择当前窗口打开编辑 buffer 。
#+begin_src elisp
  (with-eval-after-load 'org
    (setq org-src-window-setup 'current-window)
    (setq org-src-ask-before-returning-to-edit-buffer nil))
#+end_src
** org faces
#+begin_src elisp
  (setq org-todo-keyword-faces
	  '(("TODO" :foreground "Red" :weight bold)
	    ("NEXT" :foreground "Forest green" :weight bold)
	    ("SOMEDAY" :foreground "blue" :weight bold)
	    ("DONE" :foreground "#705628" :weight bold)
	    ("WAIT" :foreground "Orange" :weight bold)
	    ("CNCL" :foreground "#b4534b" :weight bold)))
#+end_src

** org-babel
根据需要加载 org-babel-load-languages, 加快 Emacs 的启动速度，[[https://emacs-china.org/t/org-babel/18699][相关讨论见 Emacs-china 论坛]]。
#+begin_src elisp
  (setq org-babel-python-command "python3")
#+end_src
#+begin_src elisp
  ;; (org-babel-do-load-languages
  ;;  'org-babel-load-languages
  ;;  '((elisp . t)))
  (defun my/org-babel-execute-src-block (&optional _arg info _params)
    "Load language if needed"
    (let* ((lang (nth 0 info))
           (sym (if (member (downcase lang) '("c" "cpp" "c++")) 'C (intern lang)))
           (backup-languages org-babel-load-languages))
      ;; - (LANG . nil) 明确禁止的语言，不加载。
      ;; - (LANG . t) 已加载过的语言，不重复载。
      (unless (assoc sym backup-languages)
        (condition-case err
            (progn
              (org-babel-do-load-languages 'org-babel-load-languages (list (cons sym t)))
              (setq-default org-babel-load-languages (append (list (cons sym t)) backup-languages)))
          (file-missing
           (setq-default org-babel-load-languages backup-languages)
           err)))))
  (advice-add 'org-babel-execute-src-block :before 'my/org-babel-execute-src-block)
  (setq org-confirm-babel-evaluate nil)
#+end_src
** org-attach
#+begin_src elisp
  (setq org-attach-id-to-path-function-list
	'(org-attach-id-ts-folder-format
	  org-attach-id-uuid-folder-format))
  (setq org-attach-dir-relative t)
#+end_src
** org-refile
#+begin_src elisp
  (setq org-refile-targets '((nil :maxlevel . 9)
			     (org-agenda-files :maxlevel . 9)))
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-refile-use-outline-path 'file)
  (setq org-refile-active-region-within-subtree t)
#+end_src
** org-id
#+begin_src elisp
  (setq org-id-method 'ts)
  (setq org-id-link-to-org-use-id 'create-if-interactive)
#+end_src
Copy id to clipboard.
#+begin_src elisp
  (defun my/copy-idlink-to-clipboard ()
    "Copy idlink to clipboard."
    (interactive)
    (when (eq major-mode 'org-agenda-mode) ;switch to orgmode
      (org-agenda-show)
      (org-agenda-goto))
    (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
      (let* ((mytmphead (nth 4 (org-heading-components)))
	     (mytmpid (funcall 'org-id-get-create))
	     (mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead)))
	(kill-new mytmplink)
	(message "Copied %s to killring (clipboard)" mytmplink)))
    (switch-to-buffer (concat (format-time-string "%Y-%m-%d") ".org")))
#+end_src
#+begin_src elisp
  (global-set-key (kbd "C-c p i") 'org-id-get-create)
  (global-set-key (kbd "<f8>") 'my/copy-idlink-to-clipboard)
#+end_src
** toc-org
#+begin_src elisp
  (use-package toc-org
	       :config
	       (add-hook 'org-mode-hook 'toc-org-mode))
#+end_src
** org-superstar
#+begin_src elisp
  (use-package org-superstar
	       :config
	       (add-hook 'org-mode-hook 'org-superstar-mode))
#+end_src
** org-present
#+begin_src elisp
  (use-package org-present
	       :config
	       (add-hook 'org-present-mode-hook (lambda ()
						  (org-present-big)
						  (org-display-inline-images)
						  (org-present-hide-cursor)
						  (org-present-read-only)
						  (global-tab-line-mode 0)
						  (awesome-tray-disable)))
	       (add-hook 'org-present-mode-quit-hook (lambda ()
						       (org-present-small)
						       (org-remove-inline-images)
						       (org-present-show-cursor)
						       (org-present-read-write)
						       (global-tab-line-mode 1)
						       (awesome-tray-enable))))
#+end_src

** bib
#+begin_src elisp

(use-package org
  :config (require 'org-attach))

(use-package ebib)
(use-package org-ref)

(use-package citar
  :bind (("C-c ]" . citar-insert-citation)
         :map minibuffer-local-map
         ("M-b" . citar-insert-preset))
  :custom
  (citar-bibliography '("~/Documents/2022/papertii.bib")))


(use-package helm)
(use-package helm-bibtex)

(use-package org-ref
  :config
  (require 'bibtex)
  (setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5)

  (require 'org-ref)
  (require 'org-ref-helm)
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
  )
(setq bibtex-completion-bibliography '("/home/bladrome/Documents/2022/papertii.bib"))

#+end_src
*** consult-bibtex
#+begin_src elisp
  (defun my/consult-bibtex-start ()
    (require 'consult-bibtex))
  (add-hook 'on-first-buffer-hook 'my/consult-bibtex-start)

  (global-set-key (kbd "C-c b o") 'consult-bibtex-open-any)
  (global-set-key (kbd "C-c b e") 'consult-bibtex-show-entry)
#+end_src
** export
#+begin_src elisp
  (defun org-export-docx ()
    "Convert org to docx."
    (interactive)
    (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
	  (template-file (expand-file-name "template.docx" my-template-directory)))
      (shell-command (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file))
      (message "Convert finish: %s" docx-file)))
#+end_src
*** auctex
#+begin_src elisp
  (use-package tex
    :defer t
    :ensure auctex
    :config
    (setq TeX-auto-save t))
#+end_src

* Applications
** git
#+begin_src elisp
  (use-package magit
         :config
         (setq magit-display-buffer-function 'magit-display-buffer-fullframe-status-topleft-v1)
         (magit-add-section-hook 'magit-status-sections-hook
                     'magit-insert-modules
                     'magit-insert-unpulled-from-upstream))
#+end_src
** eshell
#+begin_src elisp
  (global-set-key (kbd "C-`") 'eshell)
#+end_src
*** eshell buffer
#+begin_src elisp
  (add-to-list 'display-buffer-alist
	       '("*eshell*"
		 (display-buffer-reuse-window
		  display-buffer-in-side-window)
		 (side . bottom)
		 (window-height . 0.3)
		 (slot . 1)
		 (window-parameters
		  (mode-line-format . none)
		  (tab-line-format . none))))
#+end_src
*** pdf tools


#+begin_src elisp
(use-package pdf-tools
  :config
  (pdf-tools-install)
  (setq pdf-view-resize-factor 1.1)
  (setq-default pdf-view-display-size 'fit-page)
  )

#+end_src
*** pdf-view
#+begin_src elisp
  (setq pdf-view-use-unicode-ligther nil)
  (setq pdf-view-use-scaling t)
  (setq pdf-view-use-imagemagick nil)
  (setq pdf-annot-activate-created-annotations nil)
  (defun my/get-file-name ()
      (interactive)
      (kill-new (file-name-base (buffer-file-name)))
      (message "Copied %s" (file-name-base (buffer-file-name))))
  (with-eval-after-load 'pdf-view
      (define-key pdf-view-mode-map (kbd "w") 'my/get-file-name)
      (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
      (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
      (define-key pdf-view-mode-map (kbd "d") 'pdf-annot-delete)
      (define-key pdf-view-mode-map (kbd "q") 'kill-this-buffer)
      (define-key pdf-view-mode-map (kbd "y") 'pdf-view-kill-ring-save)
      (define-key pdf-view-mode-map (kbd "G") 'pdf-view-goto-page)
      (define-key pdf-view-mode-map [remap pdf-misc-print-document] 'mrb/pdf-misc-print-pages))
#+end_src

