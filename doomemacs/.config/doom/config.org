#+TITLE:     Doomemacs
#+STARTUP:   overview


* Install
#+begin_src bash
emacs --batch doomemacs.org -f org-babel-tangle
#+end_src

* init
:PROPERTIES:
:header-args: :mkdirp yes
:END:

#+begin_src elisp :tangle "~/.config/doom/init.el"
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       company             ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy
        +fuzzy
        +prescient
        +icons)            ; a search engine for love and life
       (vertico
        :icons
        :childframe)

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       doom-quit           ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)    ; ðŸ™‚
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       ;;indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       (modeline +light)   ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs            ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       (vc-gutter
        +pretty)           ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       (window-select
        +switch-window)    ; visually switch windows
       workspaces          ; tab emulation, persistence & separate workspaces
       zen                 ; distraction-free coding or writing

       :editor
       ;;evil              ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       format              ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors    ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text         ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent

       :emacs
       (dired +icons)      ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       (ibuffer +icons)    ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       eshell              ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       ;;(spell +flyspell)   ; tasing you for misspelling mispelling
       ;; grammar             ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio              ; Writes a PhD for you (citation needed)
       (debugger
       +lsp)               ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +peek)         ; M-x vscode
       magit               ; a git porcelain for Emacs
       make                ; run make tasks from Emacs
       pass                ; password manager for nerds
       pdf                 ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb                 ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux                ; an API for interacting with tmux
       tree-sitter         ; syntax and parsing, sitting in a tree...
       upload              ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty                 ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)           ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp         ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data                ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ess                 ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)           ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json                ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp)   ; all(hope(abandon(ye(who(enter(here))))))
       julia               ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex
        +cdlatex
        +latexmk
        +lsp)              ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       (lua +lsp)          ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +roam2
        +pandoc
        +dragndrop
        +gnuplot
        +hugo
        +journal
        +noter
        +pretty
        +present)          ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       plantuml            ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python
        +conda
        +pyenv
        +poetry
        +lsp
        +pyright)          ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web                 ; the tubes
       yaml                ; JSON, but readable
       zig                 ; C, but simpler

       :email
       (mu4e +org)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       everywhere          ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)          ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       literate
       (default +snippets +bindings +smartparens))

#+end_src

#+RESULTS:
* packages
:PROPERTIES:
:header-args: :mkdirp yes
:END:
#+begin_src elisp :tangle "~/.config/doom/packages.el"

(package! org-fragtog)
(package! org-page)
(package! org-ql)
(package! org-special-block-extras)
(package! org-ref)
(package! ebib)

(package! fanyi)

(package! pangu-spacing)
(package! rainbow-identifiers)
(package! rime)
(package! valign)

;; (package! mu4e-thread-folding
;;   :recipe (:host github :repo "rougier/mu4e-thread-folding"))
;; (package! mu4e-dashboard
;;   :recipe (:host github :repo "rougier/mu4e-dashboard"))
(package! svg-tag-mode
  :recipe (:host github :repo "rougier/svg-tag-mode"))
(package! nano-emacs
  :recipe (:host github :repo "rougier/nano-theme"))
(package! nano-modeline)

(package! org-protocol-capture-html
 :recipe (:host github :repo "alphapapa/org-protocol-capture-html"))

(package! elfeed
 :recipe (:host github :repo "skeeto/elfeed"
 :files ("*.el" "web/*")))

(package! elfeed-dashboard
 :recipe (:host github :repo "Manoj321/elfeed-dashboard"))

(package! ob-zig
 :recipe (:host github :repo "jolby/ob-zig.el"))

(package! ob-tmux
 :recipe (:host github :repo "ahendriksen/ob-tmux"))

;; lc
(package! shrface)
(package! leetcode
 :recipe (:host github :repo "kaiwk/leetcode.el"))

(package! org-bib-mode
 :recipe (:host github :repo "rougier/org-bib-mode"))

(package! emacs-epc
 :recipe (:host github :repo "kiwanami/emacs-epc"))
(package! lsp-bridge
 :recipe (:host github :repo "manateelazycat/lsp-bridge"
 :files ("*.el" "*.py" "acm" "core" "langserver" "icons" "resources")))
(package! mind-wave
 :recipe (:host github :repo "manateelazycat/mind-wave"
 :files ("*.el" "*.py")))
(package! nova
 :recipe (:host github :repo "manateelazycat/nova"
 :files ("*.el" "*.py")))

(package! chatgpt-shell
  :recipe (:host github :repo "xenodium/chatgpt-shell"))

(package! org-ai
  :recipe (:host github :repo "rksm/org-ai"
           :files ("*.el" "README.md" "snippets")))

#+end_src
* config
:PROPERTIES:
:header-args: :mkdirp yes
:END:

#+begin_src elisp :tangle "~/.config/doom/config.el"
(setq user-full-name "bladrome"
      user-mail-address "blackwhitedoggie@163.com")

(setq package-archives
    '(("melpa" . "http://mirrors.bfsu.edu.cn/elpa/melpa/")
    	("org"   . "http://mirrors.bfsu.edu.cn/elpa/org/")
  	("gnu"   . "http://mirrors.bfsu.edu.cn/elpa/gnu/")))

;; (setq url-proxy-services
;;          '(("socks5" . "localhost:8888")))

(setq doom-theme 'doom-dracula)
;; (setq doom-theme 'doom-one-light)
;; (setq doom-theme nil)
;; (require 'nano-theme)
;; (nano-mode)
;; (nano-light)
;; (nano-modeline-mode)
(setq-default cursor-type 'box)

(setq doom-font (font-spec :family "Roboto Mono" :size 19)
      doom-serif-font (font-spec :family "Roboto Mono" :size 20)
      ;; doom-variable-pitch-font (font-spec :family "SourceHanSerifCN")
      doom-unicode-font (font-spec :family "SourceHanSerifCN")
      ;; doom-big-font (font-spec :family "SourceHanSerifCN" :size 23)
      )

(setq use-default-font-for-symbols nil)

(setq native-comp-deferred-compilation nil)

(add-hook! 'after-setting-font-hook
  (set-fontset-font t 'latin (font-spec :family "Roboto Mono"))
  (set-fontset-font t 'symbol (font-spec :family "Symbola"))
  (set-fontset-font t 'mathematical (font-spec :family "Symbola"))
  (set-fontset-font t 'emoji (font-spec :family "Symbola")))

(setq warning-minimum-level :emergency)

;; t relative or nil
(setq display-line-numbers-type t)
;; bookmarks and recentf cache
(setq bookmark-default-file "~/.config/doom/bookmarks")

(after! dap-mode
  (setq dap-python-debugger 'debugpy))

(after! recentf
  (setq recentf-save-file "~/.config/doom/recentf"))

;; Set transparency of emacs
(defun transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

(transparency 95)

(use-package! elfeed
  :config
  (elfeed-set-max-connections 32))

(use-package! elfeed-dashboard
  :ensure t
  :config
  (setq elfeed-dashboard-file "~/.config/doom/elfeed-dashboard.org")
  ;; update feed counts on elfeed-quit
  (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))

(use-package! ob-tmux
  :ensure t
  :custom
  (org-babel-default-header-args:tmux
   '((:results . "silent")	;
     (:session . "default")	; The default tmux session to send code to
     (:socket  . "~/.config/.tmux.jack"))) ; The default tmux socket to communicate with
  ;; The tmux sessions are prefixed with the following string.
  ;; You can customize this if you like.
  (org-babel-tmux-session-prefix "ob-")
  ;; The terminal that will be used.
  ;; You can also customize the options passed to the terminal.
  ;; The default terminal is "gnome-terminal" with options "--".
  (org-babel-tmux-terminal "wezterm")
  (org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e")))


(use-package! chatgpt-shell
  :init
  (setq chatgpt-shell-openai-key
        (lambda ()
          (nth 0 (process-lines "pass" "show" "openai-key")))))

(use-package! org-ai
  :init
  (setq org-ai-openai-api-token (nth 0 (process-lines "pass" "show" "openai-key")))
  :hook
  (org-mode . org-ai-mode)
  :config
  (org-ai-global-mode)
  (org-ai-install-yasnippets))



(after! conda
  (setq conda-anaconda-home "/run/media/bladrome/bank/drome/mambaforge"
        conda-env-home-directory  "/run/media/bladrome/bank/drome/mambaforge"))

;; org-export docs using a tempalate.docx
(defun org-export-docx ()
  (interactive)
  (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
	      (template-file "/home/bladrome/.config/doom/template.docx"))
    (shell-command (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file))
    ;; pandoc --bibliography=/bibliographyfile.bib \
    ;;        --csl=chicago-fullnote-bibliography.csl \
    ;;        --reference-docx=reference.docx \
    ;;        -i (buffer-file-name) -o docx.docx
    (message "Convert finish: %s" docx-file)))

(setq +mu4e-backend 'offlineimap)
(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
	send-mail-function #'smtpmail-send-it
	message-sendmail-f-is-evil t
	message-sendmail-extra-arguments '("--read-envelope-from")
	message-send-mail-function #'message-send-mail-with-sendmail)
  (add-to-list 'mu4e-bookmarks
               ;; add bookmark for recent messages on the Mu mailing list.
               '( :name "6 months message"
                  :key  ?a
                  :query "date:20200101..now")))

;; (use-package! org-bib-mode
;; :config
;; (setq org-bib-pdf-directory "~/Downloads/papers/"))

(setq org-hugo-base-dir "~/quickstart")

(setq org-directory "~/Documents/2023")
(setq org-agenda-files (list (concat org-directory "/GTD/")))
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-attach-id-dir (concat (file-name-as-directory org-directory) "attachments"))

(setq org-download-image-dir (concat org-attach-id-dir "/" (format-time-string "%Y%m%d")))
(setq org-latex-pdf-process (list "latexmk -xelatex -bibtex- -shell-escape -f %f"))


(after! dired
  (setq dired-listing-switches "-aBhl  --group-directories-first"
	dired-dwim-target t
	dired-recursive-copies (quote always)
	dired-recursive-deletes (quote top)
	;; Directly edit permisison bits!
	wdired-allow-to-change-permissions t
	dired-omit-mode nil))

;; (use-package! org-special-block-extras
;; :hook (org-mode . org-special-block-extras-mode))

;; (use-package! org-bib-mode)
(use-package! ebib)


(use-package! rime
  :custom
  (default-input-method "rime")
  :bind
  (:map rime-active-mode-map
   ("<tab>" . 'rime-inline-ascii)
   :map rime-mode-map
   ("C-`" . 'rime-send-keybinding)
   ("M-j" . 'rime-force-enable))
  :config
  (setq rime-user-data-dir "~/.config/doom/rime")
  (setq rime-inline-ascii-trigger 'shift-l)
  (setq rime-disable-predicates
	'(rime-predicate-current-uppercase-letter-p
	  rime-predicate-punctuation-line-begin-p
	  rime-predicate-prog-in-code-p))
  (setq default-input-method 'rime)
  (setq rime-show-candidate 'posframe))

(use-package! lsp-bridge
  :config
  (global-lsp-bridge-mode)
  (yas-global-mode 1))


(after! lsp-mode
  (add-to-list 'tramp-remote-path "/home/jack/mambaforge/bin/")
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection "pyright")
                    :major-modes '(python-mode)
                    :remote? t
                    :server-id 'pyright-remote))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection "clangd")
                    :major-modes '(c++-mode)
                    :remote? t
                    :server-id 'clangd-remote)))

(use-package! pangu-spacing
  :config
  (global-pangu-spacing-mode 1)
  (setq pangu-spacing-real-insert-separtor nil))

(use-package! valign
  :config
  (setq valign-fancy-bar t)
  (add-hook 'org-mode-hook #'valign-mode))

(use-package! mind-wave)
(use-package! nova)

(use-package leetcode
  :config
  (setq leetcode-save-solutions t
	leetcode-prefer-language "cpp"
	leetcode-prefer-sql "mysql"
	leetcode-directory "~/workground/Leetcode/"))

(setq Tex-command-default "XeLaTeX")
(setq TeX-engine 'xetex)
(setq TeX-command-extra-options "-shell-escape")

(use-package org-ref
  :config
  (setq bibtex-completion-bibliography '((concat org-directory "bibliography/bibliography.bib")
					 (concat org-directory "bibliography/arxiv.bib")
					 (concat org-directory "bibliography/references.bib"))
	bibtex-completion-library-path '((concat org-directory "bibliography"))
	bibtex-completion-notes-template-multiple-files "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"
	bibtex-completion-additional-search-fields '(keywords)
	bibtex-completion-display-formats
	'((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	  (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	  (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	  (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
	bibtex-completion-pdf-open-function
	(lambda (fpath)
	  (call-process "open" nil 0 nil fpath)))
  (require 'bibtex)
  (setq bibtex-autokey-year-length 4
	bibtex-autokey-name-year-separator "-"
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator "-"
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length 5
	org-ref-bibtex-hydra-key-binding (kbd "H-b"))
  (define-key bibtex-mode-map (kbd "H-b") 'org-ref-bibtex-hydra/body)
  (require 'org-ref)
  (setq reftex-default-bibliography '(concat org-directory "bibliography/references.bib"))
  (setq org-ref-bibliography-notes '(concat org-directory "bibliography/notes.org")
	org-ref-default-bibliography '(concat org-directory "bibliography/references.bib")
	org-ref-pdf-directory '(concat org-directory "bibliography/bibtex-pdfs/")))
(setq! citar-bibliography '("/home/bladrome/Documents/2022/papertii.bib"))
(use-package org
  :init
  (setq org-export-use-babel nil)
  :hook
  (org-mode . turn-on-visual-line-mode)
  :config
  (add-to-list 'org-latex-packages-alist '("outputdir=latex.out" "minted"))
  (setq org-latex-minted-options
	'(("bgcolor" . "bg")
	  ("breaklines" . "true")
	  ("autogobble" . "true")
	  ("fontsize" . "\\scriptsize")))
  (setq org-latex-listings 'minted)
  (setq org-highlight-latex-and-related '(native script entities))
  (pdf-loader-install)


  (setq org-publish-project-alist
	`(("orgfiles"
	   :base-directory ,org-directory
	   :base-extension "org"
	   :publishing-directory "~/org/public_html"
	   :publishing-function org-html-publish-to-html
	   :with-toc t
	   :makeindex t
	   :auto-preamble t
	   :auto-sitemap
	   :sitemap-title "Notes"
	   :sitemap-sort-files
	   :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"style/worg.css\" />"
	   :html-preamble nil)
	  ("images"
	   :base-directory ,(concat org-directory "attachments")
	   :base-extension "png\\|jpg\\|webp"
	   :recursive t
	   :publishing-directory "~/org/public_html/attachments"
	   :publishing-function org-publish-attachment)
	  ("other"
	   :base-directory ,(concat org-directory "style")
	   :base-extension "css\\|el"
	   :publishing-directory "~/org/public_html/style"
	   :recursive t
	   :publishing-function org-publish-attachment)
	  ("org" :components ("orgfiles" "images" "other"))))
  ;; Tags with fast selection keys
  (setq org-tag-alist (quote (("noexport" . ?n)
			      (:startgroup)
			      ("@office" . ?o)
			      ("@field" . ?f)
			      (:endgroup)
			      ("personal" . ?p)
			      ("work" . ?w)
			      ("cancelled" . ?c)
			      ("read" . ?r)
			      ("browse" . ?b)
			      ("flagged" . ??))))
  ;; Allow setting single tags without the menu
  (setq org-fast-tag-selection-single-key (quote expert))
  ;; For tag searches ignore tasks with scheduled and deadline dates
  (setq org-agenda-tags-todo-honor-ignore-options t)
  ;; (require 'org-bars)
  ;; (add-hook 'org-mode-hook #'org-bars-mode)
  (setq org-startup-folded "folded")
  (setq org-export-date-timestamp-format nil)
  ;; Capture templates for links to pages having [ and ]
  ;; characters in their page titles - notably ArXiv
  ;; From https://github.com/sprig/org-capture-extension
  (require 'org-protocol)
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))
  (setq org-capture-templates `(
				("p" "Protocal" entry (file+headline (lambda () (concat org-directory "/" (format-time-string "%Y%m%d") ".org")) "arxiv")
				 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n \n%i\n\n\n\n%?")
				("L" "Protocol Link" entry (file+headline (lambda () (concat org-directory "/" (format-time-string "%Y%m%d") ".org")) "arxiv")
				 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n \n%i\n%?")
				("w" "Web site" entry (file+headline (lambda () (concat org-directory "/" (format-time-string "%Y%m%d") ".org")) "arxiv")
				 "* %a :website:\n\n%U %?\n\n%:initial")
				("c" "Captured" entry (file+headline (lambda () (concat org-directory "/" (format-time-string "%Y%m%d") ".org")) "arxiv")
				 "* %t %:description\nlink: %l \n\n%i\n" :prepend t :empty-lines-after 1)
				("n" "Captured Now!" entry (file+headline (lambda () (concat org-directory "/"  (format-time-string "%Y%m%d") ".org")) "arxiv")
				 "* %t %:description\nlink: %l \n\n%i\n" :prepend t :emptry-lines-after 1 :immediate-finish t)
				)))
#+end_src

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | turn-on-visual-line-mode | org-ref-org-menu | valign-mode | #[0 \300\301!\207 [lsp-bridge-mode 1] 2] | +lookup--init-org-mode-handlers-h | (closure (t) (&rest _) (add-hook 'before-save-hook 'org-encrypt-entries nil t)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | doom-disable-show-paren-mode-h | doom-disable-show-trailing-whitespace-h | +org-enable-auto-reformat-tables-h | +org-enable-auto-update-cookies-h | +org-make-last-point-visible-h | org-fancy-priorities-mode | org-superstar-mode | toc-org-enable | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-cdlatex-mode | org-eldoc-load | +literate-enable-recompile-h |

* Exp
eaf :tangle "~/.config/doom/config.el"
#+begin_src elisp :tangle no
(use-package! eaf
  :load-path "~/gitcode/emacs-application-framework"
  :custom
  (eaf-browser-continue-where-left-off t)
  ;; (browse-url-browser-function 'eaf-open-browser)
  :config
  (require 'eaf)
  (require 'eaf-browser)
  (require 'eaf-file-manager)
  (require 'eaf-image-viewer)
  (require 'eaf-pdf-viewer)
  (require 'eaf-rss-reader)
  (require 'eaf-terminal)
  (require 'eaf-file-sender)
  (require 'eaf-music-player)
  (require 'eaf-video-player)
  (require 'eaf-netease-cloud-music)

  (setq eaf-python-command "python")
  ;; (setq eaf-proxy-type "http")
  ;; (setq eaf-proxy-host "127.0.0.1")
  ;; (setq eaf-proxy-port "8889")
  (setq eaf-pdf-dark-mode nil)
  (setq eaf-terminal-font-size 18)
  (setq eaf-buffer-background-color "#FFFFFF")
  (setq eaf-start-python-process-when-require nil)

  (eaf-bind-key eaf-rss-reader-scroll-up-web-page "SPC" eaf-rss-reader-keybinding)
  (eaf-bind-key eaf-rss-reader-scroll-down-web-page "b" eaf-rss-reader-keybinding)
  ;; (defalias 'browse-web #'eaf-open-browser)
)
#+end_src
