#+title:    Doomemacs
#+author:    bladrome
#+property:  header-args  :mkdirp yes 


* Install

#+begin_src bash :tangle no
emacs --batch doomemacs.org -f org-babel-tangle
#+end_src


* init

#+begin_src elisp :tangle "~/.config/doom/init.el"
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!

;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.

;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom! :input
       ;;bidi              ; (tfel ot) thgir etirw uoy gnipleh
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       ;;company             ; the ultimate code completion backend
       (corfu +orderless)  ; complete with cap(f), cape and a flying feather!
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy
        +fuzzy
        +prescient
        +icons)            ; a search engine for love and life
       (vertico
        :icons
        :childframe)

       :ui
       ;;deft              ; notational velocity for Emacs
       doom                ; what makes DOOM look the way it does
       doom-dashboard      ; a nifty splash screen for Emacs
       doom-quit           ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)    ; 🙂
       hl-todo             ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       ;;indent-guides     ; highlighted indent columns
       (ligatures +extra)  ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       (modeline +light)   ; snazzy, Atom-inspired modeline, plus API
       ;;nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints             ; highlight the region an operation acts on
       (popup
        +all
        +defaults)         ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       treemacs            ; a project drawer, like neotree but cooler
       unicode             ; extended unicode support for various languages
       (vc-gutter
        +pretty)           ; vcs diff in the fringe
       vi-tilde-fringe     ; fringe tildes to mark beyond EOB
       (window-select
        +switch-window)    ; visually switch windows
       workspaces          ; tab emulation, persistence & separate workspaces
       zen                 ; distraction-free coding or writing

       :editor
       ;;evil              ; come to the dark side, we have cookies
       file-templates      ; auto-snippets for empty files
       fold                ; (nigh) universal code folding
       format              ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors    ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       rotate-text         ; cycle region at point between text candidates
       snippets            ; my elves. They type so I don't have to
       word-wrap           ; soft wrapping with language-aware indent

       :emacs
       (dired
        +dirvish
        +icons)            ; making dired pretty [functional]
       electric            ; smarter, keyword-based electric-indent
       (ibuffer +icons)    ; interactive buffer management
       undo                ; persistent, smarter undo for your inevitable mistakes
       vc                  ; version-control and Emacs, sitting in a tree

       :term
       eshell              ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       ;;vterm             ; the best terminal emulation in Emacs

       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +enchant)    ; tasing you for misspelling mispelling
       ;; grammar             ; tasing grammar mistake every you make

       :tools
       ;;ansible
       biblio              ; Writes a PhD for you (citation needed)
       (debugger
        +lsp)              ; FIXME stepping through code, to help you add bugs
       ;;direnv
       docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       (lookup
        +dictionary
        +offline)          ; navigate your code and its documentation
       (lsp +peek)         ; M-x vscode
       magit               ; a git porcelain for Emacs
       make                ; run make tasks from Emacs
       pass                ; password manager for nerds
       pdf                 ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       tmux                ; an API for interacting with tmux
       tree-sitter         ; syntax and parsing, sitting in a tree...
       upload              ; map local to remote projects via ssh/ftp

       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty                 ; improve the terminal Emacs experience

       :lang
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       (cc +lsp)           ; C > C++ == 1
       ;;clojure           ; java with a lisp
       common-lisp         ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       data                ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       emacs-lisp          ; drown in parentheses
       ;;erlang            ; an elegant language for a more civilized age
       ess                 ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fortran           ; in FORTRAN, GOD is REAL (unless declared INTEGER)
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       (go +lsp)           ; the hipster dialect
       ;;(graphql +lsp)    ; Give queries a REST
       ;;(haskell +lsp)    ; a language that's lazier than I am
       ;;hy                ; readability of scheme w/ speed of python
       ;;idris             ; a language you can depend on
       json                ; At least it ain't XML
       ;;(java +lsp)       ; the poster child for carpal tunnel syndrome
       (javascript +lsp)   ; all(hope(abandon(ye(who(enter(here))))))
       julia               ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       (latex
        +cdlatex
        +latexmk
        +lsp)              ; writing papers in Emacs has never been so fun
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       (lua +lsp)          ; one-based indices? one-based indices
       markdown            ; writing docs for people to ignore
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       (org
        +roam2
        +pandoc
        +dragndrop
        +gnuplot
        +hugo
        +journal
        +noter
        +pretty
        +present)          ; organize your plain life in plain text
       ;;php               ; perl's insecure younger brother
       plantuml            ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       (python
        +anaconda
        +conda
        +poetry
        +lsp
        +tree-sitter
        +pyright)          ; beautiful is better than ugly
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       rest                ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
       (rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       sh                  ; she sells {ba,z,fi}sh shells on the C xor
       ;;sml
       ;;solidity          ; do you need a blockchain? No.
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       web                 ; the tubes
       yaml                ; JSON, but readable
       zig                 ; C, but simpler

       :email
       (mu4e +org)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       calendar
       ;;emms
       everywhere          ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       (rss +org)          ; emacs as an RSS reader

       :config
       literate
       (default
         +snippets
         +bindings
         +smartparens))

#+end_src


* packages


#+begin_src elisp :tangle "~/.config/doom/packages.el"


(package! org-fragtog)
(package! org-page)
(package! org-ql)
(package! org-special-block-extras)
(package! org-ref)
(package! ebib)

(package! fanyi)

(package! pangu-spacing)
(package! rainbow-identifiers)
(package! rime)
(package! valign)


(package! vlf)
(package! org-modern)
(package! org-roam-ui)
(package! org-download)
(package! org-web-tools)

(package! ultra-scroll
  :recipe (:host github :repo "jdtsmith/ultra-scroll"))

;; (package! mu4e-thread-folding
;;   :recipe (:host github :repo "rougier/mu4e-thread-folding"))
;; (package! mu4e-dashboard
;;   :recipe (:host github :repo "rougier/mu4e-dashboard"))
(package! svg-tag-mode
  :recipe (:host github :repo "rougier/svg-tag-mode"))
(package! nano-theme
  :recipe (:host github :repo "rougier/nano-theme"))
(package! nano-modeline)

(package! svg-lib
  :recipe (:host github :repo "rougier/svg-lib"))

(package! lambda-themes
  :recipe (:host github :repo "Lambda-Emacs/lambda-themes"))

(package! org-protocol-capture-html
  :recipe (:host github :repo "alphapapa/org-protocol-capture-html"))

(package! elfeed
  :recipe (:host github :repo "skeeto/elfeed"
                 :files ("*.el" "web/*")))
(package! elfeed-dashboard
  :recipe (:host github :repo "Manoj321/elfeed-dashboard"))

(package! ob-zig
  :recipe (:host github :repo "jolby/ob-zig.el"))

(package! ob-tmux
  :recipe (:host github :repo "ahendriksen/ob-tmux"))

(package! org-tufte
  :recipe (:host github :repo "Zilong-Li/org-tufte"))

(package! emacs-epc
  :recipe (:host github :repo "kiwanami/emacs-epc"))
(package! lsp-bridge
  :recipe (:host github :repo "manateelazycat/lsp-bridge"
                 :files ("*.el" "*.py" "acm" "core" "langserver" "icons" "resources")))
(package! mind-wave
  :recipe (:host github :repo "manateelazycat/mind-wave"
                 :files ("*.el" "*.py")))
(package! blink-search
  :recipe (:host github :repo "manateelazycat/blink-search"
                 :files ("*.el" "*.py" "core/*.py" "backend" "icons")))

(package! chatgpt-shell
  :recipe (:host github :repo "xenodium/chatgpt-shell"))
(package! org-ai
  :recipe (:host github :repo "rksm/org-ai"
                 :files ("*.el" "README.md" "snippets")))
(package! gptel)

#+end_src


* config

#+begin_src elisp :tangle "~/.config/doom/config.el"

(setq toggle-debug-on-error t)

(setq user-full-name "bladrome"
      user-mail-address "blackwhitedoggie@163.com")

(use-package! package
  :config
  (setq package-archives
        '(("melpa" . "http://mirrors.bfsu.edu.cn/elpa/melpa/")
          ("org"   . "http://mirrors.bfsu.edu.cn/elpa/org/")
          ("gnu"   . "http://mirrors.bfsu.edu.cn/elpa/gnu/")))
  (package-initialize))

(use-package! use-package
  :custom
  (use-package-always-ensure nil)
  (package-native-compile t)
  (warning-minimum-level :emergency))


(setq shell-file-name (executable-find "bash"))

(setq confirm-kill-emacs nil
      system-time-locale "C"
      pop-up-windows nil
      scroll-margin 2
      widget-image-enable nil)

(setq byte-compile-warnings '(not obsolete))
(setq warning-suppress-log-types '((comp) (bytecomp)))
(setq native-comp-async-report-warnings-errors 'silent)
(setq inhibit-startup-echo-area-message (user-login-name))
(setq visible-bell t)
(setq ring-bell-function 'ignore)
(setq set-message-beep 'silent)

(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)


(setq delete-by-moving-to-trash t)

(setq word-wrap-by-category t)

;; (add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode)

(save-place-mode 1)

(global-auto-revert-mode)

(setq initial-major-mode 'org-mode) ;; org!
(setq initial-scratch-message nil)

;; Smooth mouse scrolling
(setq mouse-wheel-scroll-amount '(2 ((shift) . 1))
      mouse-wheel-progressive-speed nil
      mouse-wheel-follow-mouse t
      scroll-step 1)

;; (setq company-backends '(company-aspell))
;; (setq url-proxy-services
;;          '(("socks5" . "localhost:8888")))

(setq doom-theme 'doom-nord-light)
;; (setq doom-theme 'doom-one-light)
;; (setq doom-theme nil)
;; (load-theme 'lambda-light t)
;; (require 'nano-theme)
;; (nano-mode)
;; (nano-light)
;; (nano-modeline-mode)

(setq-default cursor-type 'box)
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "xdg-open")


(setq doom-font (font-spec :family "FiraCode Nerd Font Mono" :size 40)
      doom-variable-pitch-font doom-font
      doom-symbol-font (font-spec :family "VictorMono")
      doom-big-font (font-spec :family "VictorMono" :size 24))

(setq native-comp-deferred-compilation nil)
(setq native-comp-jit-compilation nil)


(add-hook! 'after-setting-font-hook
  (set-fontset-font t 'symbol (font-spec :family "Symbola"))
  (set-fontset-font t 'mathematical (font-spec :family "Symbola"))
  (set-fontset-font t 'emoji (font-spec :family "Symbola")))


(global-visual-line-mode)

;; t relative or nil
(setq display-line-numbers-type t)

(show-paren-mode t)
(setq use-short-answers t)

(blink-cursor-mode 1)

(setq-default x-stretch-cursor t
              x-underline-at-descent-line t)

;; bookmarks and recentf cache
(setq bookmark-default-file "~/.config/doom/bookmarks")

(after! dap-mode
  (setq dap-python-debugger 'debugpy))

(after! recentf
  (setq recentf-save-file "~/.config/doom/recentf"))

;; Set transparency of emacs
(defun transparency (value)
  "Sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "nTransparency Value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))

(transparency 95)

;; (use-package! doom-modeline
;;   :custom
;;   (doom-modeline-buffer-encoding nil)
;;   (doom-modeline-enable-word-count nil)
;;   (doom-modeline-height 10))

(use-package! elfeed
  :config
  (elfeed-set-max-connections 32))

(use-package! elfeed-dashboard
  :ensure t
  :config
  (setq elfeed-dashboard-file "~/.config/doom/elfeed-dashboard.org")
  ;; update feed counts on elfeed-quit
  (advice-add 'elfeed-search-quit-window :after #'elfeed-dashboard-update-links))


;; MINIBUFFER COMPLETION
(use-package! vertico
  :init (vertico-mode)
  :custom
  (vertico-sort-function 'vertico-sort-history-alpha))

;; Search for partial matches in any order
(use-package! orderless
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides
   '((file (styles partial-completion)))))

;; Improve keyboard shortcut discoverability
(use-package! which-key
  :config (which-key-mode)
  :custom
  (which-key-max-description-length 40)
  (which-key-lighter nil)
  (which-key-sort-order 'which-key-description-order))

;; Consult convenience functions
(use-package! consult
  :bind
  (("C-c M-x" . consult-mode-command)
   ("C-c h" . consult-history)
   ("C-c k" . consult-kmacro)
   ("C-c m" . consult-man)
   ("C-c i" . consult-info)
   ([remap Info-search] . consult-info)))

;; Improved help buffers
(use-package! helpful
  :bind
  (("C-h f" . helpful-function)
   ("C-h x" . helpful-command)
   ("C-h k" . helpful-key)
   ("C-h v" . helpful-variable)))

(use-package! ob-tmux
  :custom
  (org-babel-default-header-args:tmux
   '((:results . "silent")
     (:session . "default")  ; The default tmux session to send code to
     (:socket  . nil)))      ; The default tmux socket to communicate with
  ;; The tmux sessions are prefixed with the following string.
  ;; You can customize this if you like.
  (org-babel-tmux-session-prefix "ob-")
  ;; The terminal that will be used.
  ;; You can also customize the options passed to the terminal.
  ;; The default terminal is "gnome-terminal" with options "--".
  (org-babel-tmux-terminal "wezterm")
  (org-babel-tmux-terminal-opts '("-T" "ob-tmux" "-e")))

(use-package! vlf
  :config
  (require 'vlf-setup)
  (custom-set-variables
   '(vlf-application 'dont-ask))
  )

(use-package! org-tufte
  :config
  (setq org-tufte-htmlize-code t))

;; (use-package! chatgpt-shell
;;   :init
;;   (setq chatgpt-shell-openai-key
;;         (lambda ()
;;           (nth 0 (process-lines "pass" "show" "openai-key")))))
;; (use-package! gptel
;;   :custom
;;   (gptel-temperature 0.1)
;;   (gptel-prompt-prefix-alist)
;;   :config (add-hook 'gptel-post-response-functions 'gptel-end-of-response)
;;   (setq-default gptel-backend
;;                 (gptel-make-openai "ChatGLM"
;;                                    :host "open.bigmodel.cn"
;;                                    :endpoint "/api/paas/v4/chat/completions"
;;                                    :models '("glm-4" "glm-4v" "glm-3-turbo")
;;                                    :stream t
;;                                    :header '(("Authorization" .  "Bearer eyJhbGciOiJIUzI1NiIsInNpZ25fdHlwZSI6IlNJR04iLCJ0eXAiOiJKV1QifQ.eyJhcGlfa2V5IjoiZmM2MWNmMzVjZDVlYWQyZWYxNGQ3YjNhOGViYjNmZjciLCJleHAiOjE3MTIzMjExNjk3MTYsInRpbWVzdGFtcCI6MTcxMTQ1NzE2OTcxNn0.NRmC8WdIB2jroyqXClyfyIP-TeQYWirv_r8pj9Csqa4"))))
;;   )
;; (use-package! org-ai
;;   ;;   :init
;;   ;;   (setq org-ai-openai-api-token (nth 0 (process-lines "pass" "show" "openai-key")))
;;   :hook
;;   (org-mode . org-ai-mode)
;;   :config
;;   (org-ai-global-mode)
;;   (org-ai-install-yasnippets))



(after! conda
  (setq conda-anaconda-home "/run/media/bladrome/bank/drome/mambaforge"
	conda-env-home-directory  "/run/media/bladrome/bank/drome/mambaforge"))

;; org-export docs using a tempalate.docx
(defun org-export-docx ()
  (interactive)
  (let ((docx-file (concat (file-name-sans-extension (buffer-file-name)) ".docx"))
	(template-file "/home/bladrome/.config/doom/template.docx"))
    (shell-command (format "pandoc %s -o %s --reference-doc=%s" (buffer-file-name) docx-file template-file))
    ;; pandoc --bibliography=/bibliographyfile.bib \
    ;;        --csl=chicago-fullnote-bibliography.csl \
    ;;        --reference-docx=reference.docx \
    ;;        -i (buffer-file-name) -o docx.docx
    (message "Convert finish: %s" docx-file)))

(setq +mu4e-backend 'offlineimap)
(after! mu4e
  (setq sendmail-program (executable-find "msmtp")
	send-mail-function #'smtpmail-send-it
	message-sendmail-f-is-evil t
	message-sendmail-extra-arguments '("--read-envelope-from")
	message-send-mail-function #'message-send-mail-with-sendmail)
  (add-to-list 'mu4e-bookmarks
	       ;; add bookmark for recent messages on the Mu mailing list.
	       '( :name "6 months message"
		  :key  ?a
		  :query "date:20200101..now")))

(setq org-directory "~/chromeorg/2024")
(setq org-hugo-base-dir (file-name-concat org-directory "Hugo"))
(setq org-agenda-files (list (file-name-concat org-directory "GTD")))


(after! org
  (setq org-confirm-babel-evaluate nil
        org-edit-src-content-indentation 0
        org-ellipsis "▾"
        org-fold-catch-invisible-edits 'show
        org-fontify-quote-and-verse-blocks t
        org-fontify-whole-heading-line t
        org-fontify-done-headline t
        org-hide-block-startup t
        org-hide-emphasis-markers t
        org-hide-leading-stars t
        org-id-link-to-org-use-id t
        org-image-actual-width '(450)
        org-list-allow-alphabetical t
        org-pretty-entities t
        org-return-follows-link t
        org-special-ctrl-a/e t
        org-special-ctrl-k t
        org-src-preserve-indentation nil
        org-src-tab-acts-natively t
        org-startup-indented t
        org-startup-with-inline-images t
        org-use-speed-commands t
        org-use-sub-superscripts "{}"))

(setq org-todo-keywords '((sequence "TODO" "|" "DONE")))

;; (add-hook! 'org-babel-after-execute-hook 'org-display-inline-images 'append)
;; (add-hook! 'org-babel-after-execute-hook 'org-toggle-latex-fragment 'append)

(setq-default prettify-symbols-alist '(("#+title:" . "󰗴")
                                       ("#+author:" . "󰴓")
                                       ("#+caption:" . "☰")
                                       ("#+include:" . "")
                                       ("#+html_head:" . "")
                                       ("#+startup:" . "")
                                       ("#+filetags:" . "🎃")
                                       ("#+identifier:" . "👺")
                                       ("#+results:" . "🎁")
                                       ("#+attr_latex:" . "🍄")
                                       ("#+attr_org:" . "🔔")
                                       ("#+options:" . "⌥")
                                       ("#+date:" . "⚓")
                                       ("#+property:" . "☸")
                                       (":properties:" . "⚙")
                                       (":end:" . ".")
                                       ("[ ]" . "☐")
                                       ("[X]" . "☑︎")
                                       ("\\pagebreak" . 128204)
                                       ("#+begin_quote" . "❮")
                                       ("#+end_quote" . "❯")
                                       ("#+begin_src" . "❮")
                                       ("#+end_src" . "❯")))

(add-hook! 'org-mode-hook 'prettify-symbols-mode)

(after! org-superstar
  (setq
   org-superstar-headline-bullets-list '("🙘" "🙙" "🙚" "🙛")
   org-superstar-special-todo-items t
   org-superstar-item-bullet-alist '((?- . ?➤) (?* . ?🔻) (?+ . ?△))
   org-superstar-prettify-item-bullets t ))


(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-attach-id-dir (file-name-concat org-directory "attachments"))


(setq org-latex-pdf-process (list "latexmk -xelatex -shell-escape -f %f"))
;; (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))


(after! ox-latex
  (add-to-list 'org-latex-classes
	       '("elsarticle"
		 "\\documentclass[review,authoryear]{elsarticle}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

(after! dired
  (setq dired-listing-switches "-aBhl  --group-directories-first"
	dired-dwim-target t
	dired-recursive-copies (quote always)
	dired-recursive-deletes (quote top)
	;; Directly edit permisison bits!
	wdired-allow-to-change-permissions t
	dired-omit-mode nil))

;; (use-package! org-special-block-extras
;; :hook (org-mode . org-special-block-extras-mode))

;; (use-package! org-bib-mode)

(use-package! rime
  :custom
  (default-input-method "rime")
  :bind
  (:map rime-active-mode-map
   ("<tab>" . 'rime-inline-ascii)
   :map rime-mode-map
   ("C-`" . 'rime-send-keybinding)
   ("M-j" . 'rime-force-enable))
  :config
  (setq rime-user-data-dir "~/.config/doom/rime")
  (setq rime-inline-ascii-trigger 'shift-l)
  (setq rime-posframe-properties
	(list :background-color "#333333"
	      :foreground-color "#dcdccc"
	      :font "NotoMono Nerd Font 14"
	      :internal-border-width 10))
  ;; (setq rime-disable-predicates
  ;;       '(rime-predicate-evil-mode-p
  ;;         rime-predicate-after-alphabet-char-p
  ;;         rime-predicate-current-input-punctuation-p
  ;;         rime-predicate-current-uppercase-letter-p
  ;;         rime-predicate-punctuation-line-begin-p))
  (setq rime-disable-predicates
        '(rime-predicate-evil-mode-p
          rime-predicate-current-uppercase-letter-p
          rime-predicate-punctuation-line-begin-p
          rime-predicate-prog-in-code-p))
  (setq default-input-method 'rime)
  (setq rime-show-candidate 'posframe))

;; (use-package! lsp-bridge
;;   :config
;;   (global-lsp-bridge-mode)
;;   (yas-global-mode 1))
;;  (lsp-bridge-enable-with-tramp)


(after! tramp
  (add-to-list 'tramp-remote-path "/home/jack/mambaforge/bin"))
(after! lsp-mode
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection "pyright")
          	    :major-modes '(python-mode)
          	    :remote? t
          	    :server-id 'pyright-tramp))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-tramp-connection "clangd")
          	    :major-modes '(c++-mode)
          	    :remote? t
          	    :server-id 'clangd-tramp)))

(use-package! pangu-spacing
  :config
  (global-pangu-spacing-mode 1)
  (setq pangu-spacing-real-insert-separtor nil))

(use-package! valign
  :config
  (setq valign-fancy-bar t)
  (add-hook 'org-mode-hook #'valign-mode))

;; (use-package! ultra-scroll
;;   :init
;;   (setq scroll-conservatively 101 ; important!
;;         scroll-margin 0)
;;   :config
;;   (ultra-scroll-mode 1))

(use-package! org-web-tools
  :init
  (map!
   :leader
   :prefix "i"
   :desc "insert weblinks" "l" #'org-web-tools-insert-link-for-url))

(use-package! org-download
  :defer nil
  :custom
  (org-download-image-dir (file-name-concat org-attach-id-dir (format-time-string "%Y%m%d")))
  (org-image-actual-width '(600))
  (org-download-heading-lvl nil)
  (org-download-timestamp "")
  :config
  (require 'org-download))

(after! org-download
  (setq org-download-method 'directory)
  (setq org-download-link-format "[[file:images/%s]]\n"))


(use-package! mind-wave)



(setq Tex-command-default "XeLaTeX")
(setq TeX-engine 'xetex)
(setq TeX-command-extra-options "-shell-escape")

;; (use-package! org
;;   :custom
;;   (org-export-with-drawers nil)
;;   (org-export-with-todo-keywords nil)
;;   (org-export-with-broken-links t)
;;   (org-export-with-toc nil)
;;   (org-export-with-smart-quotes t)
;;   (org-export-with-date t)
;;   (org-export-with-author t)
;;   (org-export-with-section-numbers nil)
;;   (org-export-with-sub-superscripts nil)
;;   (org-export-headline-levels 5)
;;   (org-export-in-background nil)
;;   (org-export-use-babel nil))

(use-package! org-ref
  :init
  (require 'org-ref)
  (require 'org-ref-ivy)
  (require 'org-ref-refproc) ;; this is not loaded by default!
  :config
  (add-to-list 'org-export-before-parsing-hook #'org-ref-refproc)
  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
        org-ref-insert-cite-function 'org-ref-cite-insert-ivy
        org-ref-insert-label-function 'org-ref-insert-label-link
        org-ref-insert-ref-function 'org-ref-insert-ref-link
        org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
  (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link-hydra/body)
  (define-key bibtex-mode-map (kbd "C-c b") 'org-ref-bibtex-hydra/body)
  )


(use-package! websocket
  :after org-roam)

(use-package! org-roam-ui
  :after org-roam ;; or :after org
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
  ;;  :hook (after-init . org-roam-ui-mode)
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t))


;; (use-package! org-modern
;;   :config
;;   (setq
;;    ;; Edit settings
;;    org-auto-align-tags nil
;;    org-tags-column 0
;;    org-catch-invisible-edits 'show-and-error
;;    org-special-ctrl-a/e t
;;    org-insert-heading-respect-content t
;;    ;; Org styling, hide markup etc.
;;    org-hide-emphasis-markers t
;;    org-pretty-entities t
;;    org-ellipsis " "
;;    ;; Agenda styling
;;    org-agenda-tags-column 0
;;    org-agenda-block-separator ?─
;;    org-agenda-time-grid
;;    '((daily today require-timed)
;;      (800 1000 1200 1400 1600 1800 2000)
;;      " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
;;    org-agenda-current-time-string
;;    "◀── now ─────────────────────────────────────────────────")
;;   :hook
;;   (org-mode . global-org-modern-mode))

(use-package! svg-lib)
(use-package! svg-tag-mode)

(use-package! org-fragtog
  :after org
  :custom
  (org-startup-with-latex-preview t)
  :hook
  (org-mode . org-fragtog-mode)
  :custom
  (org-format-latex-options
   (plist-put org-format-latex-options :scale 3)
   (plist-put org-format-latex-options :foreground 'auto)
   (plist-put org-format-latex-options :background 'auto)))

;; (use-package! org-roam
;;   :custom
;;   (org-roam-directory (file-name-concat org-directory "roam"))
;;   :bind (("C-c n l" . org-roam-buffer-toggle)
;;          ("C-c n f" . org-roam-node-find)
;;          ("C-c n g" . org-roam-graph)
;;          ("C-c n i" . org-roam-node-insert)
;;          ("C-c n c" . org-roam-capture)
;;          ;; Dailies
;;          ("C-c n j" . org-roam-dailies-capture-today))
;;   :config
;;   ;; If you're using a vertical completion framework, you might want a more informative completion interface
;;   (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
;;   (org-roam-db-autosync-mode)
;;   ;; If using org-roam-protocol
;;   (require 'org-roam-protocol))

(use-package! org
  :init
  (setq org-export-use-babel nil)
  (require 'oc-bibtex)
  (require 'org-eldoc)
  :hook
  (org-mode . turn-on-visual-line-mode)
  :config
  (setq org-babel-js-cmd "bun")
  (add-to-list 'org-latex-packages-alist '("outputdir=latex.out" "minted"))
  (setq org-latex-minted-options
        '(("bgcolor" . "bg")
          ("breaklines" . "true")
          ("autogobble" . "true")
          ("fontsize" . "\\scriptsize")))
  (setq org-latex-listings 'minted)
  (setq org-highlight-latex-and-related '(native script entities))
  (pdf-loader-install)

  (setq org-publish-directory (file-name-concat org-directory "org-publish"))

  (setq org-publish-project-alist
        `(("orgfiles"
           :base-directory ,org-directory
           :base-extension "org"
           :publishing-directory ,(file-name-concat org-publish-directory "html")
           :publishing-function org-html-publish-to-html
           :with-toc t
           :makeindex t
           :auto-preamble t
           :auto-sitemap
           :sitemap-title "Notes"
           :sitemap-sort-files
           :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"style/worg.css\" />"
           :html-preamble nil)
          ("images"
           :base-directory ,(file-name-concat org-directory "attachments")
           :base-extension "png\\|jpg\\|webp"
           :recursive t
           :publishing-directory ,(file-name-concat org-publish-directory "attachments")
           :publishing-function org-publish-attachment)
          ("other"
           :base-directory ,(file-name-concat org-directory "style")
           :base-extension "css\\|el"
           :publishing-directory ,(file-name-concat org-publish-directory "style")
           :recursive t
           :publishing-function org-publish-attachment)
          ("org" :components ("orgfiles" "images" "other"))))
  ;; Tags with fast selection keys
  (setq org-tag-alist (quote (("noexport" . ?n)
			      (:startgroup)
			      ("@office" . ?o)
			      ("@field" . ?f)
			      (:endgroup)
			      ("personal" . ?p)
			      ("work" . ?w)
			      ("cancelled" . ?c)
			      ("read" . ?r)
			      ("browse" . ?b)
			      ("flagged" . ??))))
  ;; Allow setting single tags without the menu
  (setq org-fast-tag-selection-single-key (quote expert))
  ;; For tag searches ignore tasks with scheduled and deadline dates
  (setq org-agenda-tags-todo-honor-ignore-options t)
  ;; (require 'org-bars)
  ;; (add-hook 'org-mode-hook #'org-bars-mode)
  (setq org-startup-folded "folded")
  (setq org-export-date-timestamp-format nil)
  ;; Capture templates for links to pages having [ and ]
  ;; characters in their page titles - notably ArXiv
  ;; From https://github.com/sprig/org-capture-extension
  (require 'org-protocol)
  (defun transform-square-brackets-to-round-ones(string-to-transform)
    "Transforms [ into ( and ] into ), other chars left unchanged."
    (concat
     (mapcar #'(lambda (c) (if (equal c ?\[) ?\( (if (equal c ?\]) ?\) c))) string-to-transform)))
  (setq org-capture-templates `(
                                ("p" "Protocal" entry (file+headline (lambda () (file-name-concat org-directory (format-time-string "%Y%m%d.org"))) "arxiv")
                                 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n \n%i\n\n\n\n%?"  :immediate-finish t)
                                ("L" "Protocol Link" entry (file+headline (lambda () (file-name-concat org-directory (format-time-string "%Y%m%d.org"))) "arxiv")
                                 "* [[%:link][%(transform-square-brackets-to-round-ones \"%:description\")]]\n \n%i\n%?"  :immediate-finish t)
                                ("w" "Web site" entry (file+headline (lambda () (file-name-concat org-directory (format-time-string "%Y%m%d.org"))) "arxiv")
                                 "* %a :website:\n\n%U %?\n\n%:initial"  :immediate-finish t)
                                ("c" "Captured" entry (file+headline (lambda () (file-name-concat org-directory (format-time-string "%Y%m%d.org"))) "arxiv")
                                 "* %t %:description\nlink: %l \n\n%i\n" :prepend t :empty-lines-after 1)
                                ("n" "Captured Now!" entry (file+headline (lambda () (file-name-concat org-directory (format-time-string "%Y%m%d.org"))) "arxiv")
                                 "* %t %:description\nlink: %l \n\n%i\n" :prepend t :emptry-lines-after 1 :immediate-finish t)
                                )))
#+end_src


* Exp

eaf :tangle "~/.config/doom/config.el"

#+begin_src elisp :tangle no
(use-package! eaf
  :load-path "~/gitcode/emacs-application-framework"
  :custom
  (eaf-browser-continue-where-left-off t)
  ;; (browse-url-browser-function 'eaf-open-browser)
  :config
  (require 'eaf)
  (require 'eaf-browser)
  (require 'eaf-file-manager)
  (require 'eaf-image-viewer)
  (require 'eaf-pdf-viewer)
  (require 'eaf-rss-reader)
  (require 'eaf-terminal)
  (require 'eaf-file-sender)
  (require 'eaf-music-player)
  (require 'eaf-video-player)
  (require 'eaf-netease-cloud-music)

  (setq eaf-python-command "python")
  ;; (setq eaf-proxy-type "http")
  ;; (setq eaf-proxy-host "127.0.0.1")
  ;; (setq eaf-proxy-port "8889")
  (setq eaf-pdf-dark-mode nil)
  (setq eaf-terminal-font-size 18)
  (setq eaf-buffer-background-color "#FFFFFF")
  (setq eaf-start-python-process-when-require nil)

  (eaf-bind-key eaf-rss-reader-scroll-up-web-page "SPC" eaf-rss-reader-keybinding)
  (eaf-bind-key eaf-rss-reader-scroll-down-web-page "b" eaf-rss-reader-keybinding)
  ;; (defalias 'browse-web #'eaf-open-browser)
  )
#+end_src
